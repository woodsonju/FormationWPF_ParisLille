<Window x:Class="WPF1Window.MiseEnForme.MiseEnFormeTest"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WPF1Window.MiseEnForme"
        mc:Ignorable="d"
        Title="MiseEnFormeTest" Height="450" Width="800">
    <!--
      
     Si on fait une comparaison avec le Web. 
        Le XAML est très similaire au HTML
        Le style au CSS
        
        En utilisant les styles, vous pouvez grouper un ensemble de propriétés et les assigner à des contrôles d'un type spécifique, 
        et comme en CSS, un style peut hériter d'un autre style.
    
        Les styles ont un ensemble de propriétés ; ici, je vais placer quelques-unes des propriétés utilisées fréquemment et 
        importantes.
                Setters: définit les valeurs de propriété
                Triggers: modifie les paramètres de style
                Resources: obtient ou définit une collection de ressources que vous pouvez utiliser
                BasedOn: crée un style spécialisé qui hérite des paramètres d'un autre style
                TargetType: obtient ou définit le contrôle auquel le style est destiné. 
                            Avec l'Attribut TargetType pour restreindre les objets auxquels appliquer des styles
    -->
    <Window.Resources>
        <!--Styles -->
        <Style x:Key="MonStyleBleu">
            <Setter Property="Button.Background" Value="Aqua" />
            <Setter Property="Control.Margin" Value="5" />
            <Setter Property="TextBox.Height" Value="30" />
        </Style>
        <!--Héritage de Style-->
        <Style x:Key="MonStyleBleuEnfant" BasedOn="{StaticResource ResourceKey=MonStyleBleu}" 
               TargetType="{x:Type Button}">
            <Setter Property="ItemsControl.Padding" Value="1"  />
            <Setter Property="Background" Value="Green"/>
        </Style>
        
        <!--Triggers-->
        <!--Ecouteur d'évenement sur une valeur de proprités-->
        <!--
            Les styles ci-dessus  définissent une valeur statique pour une propriété spécifique. 
            Cependant, à l'aide de déclencheurs (Trigger), vous pouvez modifier la valeur d'une propriété donnée. 
            Les Triggers se présentent sous plusieurs formes : 
                Property triggers, event triggers et data triggers. 
            Ils vous permettent de faire des choses qui seraient normalement faites dans le code-behind.
        -->

        <!--Property Trigger-->
        <Style x:Key="TriggerStyle" TargetType="Button">
            <Setter Property="Foreground" Value="red" />
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <!--Nous appliquons un trigger qui ecoute  la propriété IsMouseOver
                        Une fois que la propriété passe à true, on applique le setter
                    -->
                    <Setter Property="Foreground" Value="Yellow" />
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <!-- multi-trigger : idem que property-triggers à l'exception 
            qu'ils monitorent plusieurs propriétés en même temps
          NB. : le trigger déclenchera les setters lorsque toutes les propriétés surveillées auront 
        la valeur attendue
        
        Exple : chgt de background si mouse over et focus
        -->
        <Style x:Key="myMultiTrigger" TargetType="TextBox">
            <Style.Triggers>
                <MultiTrigger>
                    <!--Nous utilisons un Trigger pour changer la couleur d'arrière-plan de la zone de texte une 
                        fois qu'elle a le focus du clavier et que le curseur de la souris est dessus -->
                    <MultiTrigger.Conditions>
                        <Condition Property="IsKeyboardFocused" Value="true"/>
                        <Condition Property="IsMouseOver" Value="True" />
                    </MultiTrigger.Conditions>
                    <MultiTrigger.Setters>
                        <Setter Property="Background" Value="LightGreen"/>
                    </MultiTrigger.Setters>
                </MultiTrigger>
            </Style.Triggers>
        </Style>

        <!--
            DataTrigger = monitoring d'une "valeur" de 
                          propriété liée (bound property)
           
            Un Data Triggers exécute certaines actions lorsque les données liées (bind) satisfont une certaine condition.
        -->
        <Style x:Key="myDataTrigger" TargetType="TextBlock">
            <Setter Property="Text" Value="No" />
            <Setter Property="Foreground" Value="Red" />
            <Style.Triggers>
                <!--Avec le DataTrigger, nous allons lier le TextBlock à la propriété IsChecked du CheckBox
                    Ensuite nous founissons un style au TextBlock lorsque la propriété IsChecked du controle CheckBox
                    passe à True. 
                    Le texte du CheckBox change (affiche Yes) et devient vert
                    -->
                <DataTrigger Binding="{Binding ElementName=cbSample, Path=IsChecked}" Value="True">
                    <Setter Property="Text" Value="Yes" />
                    <Setter Property="Foreground" Value="Green" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!-- Template ================ ================ ================ 
        Les Templates, Pourquoi les utiliser ?
        Les « Styles » peuvent uniquement modifier l'apparence de votre contrôle avec les propriétés par défaut de ce contrôle.
         Tandis qu'avec  Avec les « Templates », on peut venir personaliser l’apparence de nos contrôles
        Un Template décrit l'aspect général et l'apparence visuelle d'un contrôle
        Dans les applications WPF, vous pouvez facilement créer vos propres modèles lorsque vous souhaitez personnaliser
        le comportement visuel et l'apparence visuelle d'un contrôle.
        
        Tous les éléments de l'interface utilisateur ont une apparence et un comportement, par exemple, Button a une apparence et un comportement. 
        L'événement  clic ou l'événement de survol de la souris sont les comportements déclenchés en réponse à un clic et un survol et
        il existe également une apparence par défaut du bouton qui peut être modifiée par le modèle de contrôle.
        -->
        <SolidColorBrush x:Key="myBorder" Color="Brown"/>
        <ControlTemplate x:Key="myTemplate" TargetType="{x:Type Button}">
            <Border x:Name="border"
                   CornerRadius="35" Padding="2"
                    BorderThickness="2"
                    Background="Coral"
                    BorderBrush="{DynamicResource myBorder}"
                    >
               <!--Comment se positionne le contenu-->
                <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"
                                  Content="{TemplateBinding Button.Content}"/>
            </Border>
        </ControlTemplate>
    </Window.Resources>
    <StackPanel>
        <!--Utilisation des styles-->
        <Label Content="Utilisation des styles : " Height="28" Name="label1"/>
        <Button Content="Btn stylé ressources" Height="24" Name="button1" Width="130" Style="{StaticResource  MonStyleBleu}"/>
        <Button Content="Button" Height="24" Name="button2" Width="130" Style="{StaticResource  MonStyleBleuEnfant}"/>
        
        <!-- Utilisation des triggers -->
        <Label Content="Utilisation de trigger : " Height="28" Name="label4"/>
        <Button Content="Survolez-moi" Height="24" Name="button4" Width="130" Style="{StaticResource TriggerStyle}"/>
        
        <!--Utilisation du multi-Trigger-->
        <Label Content="Utilisation de Multi-Trigger : " Height="28" Name="label7"/>
        <TextBox Text="Test multi (Hover and Focus here)" Width="200" Height="20" Name="textBox10"
                 HorizontalAlignment="Center" VerticalAlignment="Center" Style="{StaticResource myMultiTrigger}"/>
        
        <!--Utilisation du DataTrigger-->
        <Label Content="Utilisation de Data-Trigger : " Height="28" Name="label5"/>
        <StackPanel  HorizontalAlignment="Center" VerticalAlignment="Center" Background="LightGray">
            <CheckBox Name="cbSample" Content="Hello, World?" />
            <TextBlock FontSize="48" Style="{StaticResource myDataTrigger}" />
        </StackPanel>
        
        <!--Utilisation du Template-->
        <Label Content="Utilisation de Template : " Height="28" Name="label2" Margin="0,20"/>
        <Button Content="Submit" Height="23" Name="button3" Width="125" Template="{StaticResource myTemplate}"/>
    </StackPanel>
</Window>
